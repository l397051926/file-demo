package com.gennlife.fs.common.utils;

import lombok.val;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import java.math.BigDecimal;
import java.sql.*;

public class DBUtils {

    private static final int NOT_FOUND = -1;

    public static String convertGroupNameToTableName(String s) {
        int index = s.indexOf(".");
        return index == NOT_FOUND ? s : s.substring(index + 1)
            .replaceAll("\\.", "_");
    }

    public static String convertGroupNameToColumnName(String s) {
        int index = s.lastIndexOf(".");
        return index == NOT_FOUND ? s : s.substring(index + 1);
    }

    public static Integer updateAndReturnID(JdbcTemplate db, String sql) {
        KeyHolder keyHolder = new GeneratedKeyHolder();
        db.update(con -> con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS), keyHolder);
        Number key = keyHolder.getKey();
        return key == null ? null : key.intValue();
    }

    public static PreparedStatement prepareStatement(Connection conn, String template, Object ...params) throws SQLException {
        return prepareStatement(conn, Statement.NO_GENERATED_KEYS, template, params);
    }

    public static PreparedStatement prepareStatement(Connection conn, int autoGeneratedKeys, String template, Object ...params) throws SQLException {
        PreparedStatement s = conn.prepareStatement(template, autoGeneratedKeys);
        for (int i = 1; i <= params.length; ++i) {
            Object obj = params[i - 1];
            if (obj == null) {
                s.setNull(i, Types.VARCHAR);
            } else if (obj instanceof Boolean) {
                s.setBoolean(i, (boolean)obj);
            } else if (obj instanceof Byte) {
                s.setByte(i, (byte)obj);
            } else if (obj instanceof Short) {
                s.setShort(i, (short)obj);
            } else if (obj instanceof Integer) {
                s.setInt(i, (int)obj);
            } else if (obj instanceof Long) {
                s.setLong(i, (long)obj);
            } else if (obj instanceof Float) {
                s.setFloat(i, (float)obj);
            } else if (obj instanceof Double) {
                s.setDouble(i, (double)obj);
            } else if (obj instanceof BigDecimal) {
                s.setBigDecimal(i, (BigDecimal)obj);
            } else if (obj instanceof String) {
                s.setString(i, (String)obj);
            } else if (obj instanceof byte[]) {
                s.setBytes(i, (byte[])obj);
            } else if (obj instanceof Date) {
                s.setDate(i, (Date)obj);
            } else if (obj instanceof Time) {
                s.setTime(i, (Time)obj);
            } else if (obj instanceof Timestamp) {
                s.setTimestamp(i, (Timestamp)obj);
            } else {
                throw new SQLException("Unsupported parameter type: " + obj.getClass().getName());
            }
        }
        return s;
    }

    public static final String LE = "<=";
    public static final String GE = ">=";
    public static final String EQ = "=";
    public static final String LIKE = "LIKE";

    public static String Q(String field) {
        return "`" + field + "`";
    }

    public static String P(String ...fields) {
        if (fields.length == 0) {
            return "";
        }
        val sb = new StringBuffer("`").append(fields[0]).append("`");
        for (int i = 1; i < fields.length; ++i) {
            sb.append(", `").append(fields[i]).append("`");
        }
        return sb.toString();
    }

    public static String QP(String ...fields) {
        return "(" + P(fields) + ")";
    }

}
